# coding: utf-8

"""
    RiseML API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.1.0
    Contact: contact@riseml.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class Run(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, number=None, state=None, state_changed_at=None, created_at=None, started_at=None, finished_at=None, params=None, jobs=None):
        """
        Run - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'number': 'int',
            'state': 'str',
            'state_changed_at': 'int',
            'created_at': 'int',
            'started_at': 'int',
            'finished_at': 'int',
            'params': 'str',
            'jobs': 'list[Job]'
        }

        self.attribute_map = {
            'id': 'id',
            'number': 'number',
            'state': 'state',
            'state_changed_at': 'state_changed_at',
            'created_at': 'created_at',
            'started_at': 'started_at',
            'finished_at': 'finished_at',
            'params': 'params',
            'jobs': 'jobs'
        }

        self._id = id
        self._number = number
        self._state = state
        self._state_changed_at = state_changed_at
        self._created_at = created_at
        self._started_at = started_at
        self._finished_at = finished_at
        self._params = params
        self._jobs = jobs


    @property
    def id(self):
        """
        Gets the id of this Run.


        :return: The id of this Run.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Run.


        :param id: The id of this Run.
        :type: str
        """

        self._id = id

    @property
    def number(self):
        """
        Gets the number of this Run.


        :return: The number of this Run.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """
        Sets the number of this Run.


        :param number: The number of this Run.
        :type: int
        """

        self._number = number

    @property
    def state(self):
        """
        Gets the state of this Run.


        :return: The state of this Run.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Run.


        :param state: The state of this Run.
        :type: str
        """

        self._state = state

    @property
    def state_changed_at(self):
        """
        Gets the state_changed_at of this Run.


        :return: The state_changed_at of this Run.
        :rtype: int
        """
        return self._state_changed_at

    @state_changed_at.setter
    def state_changed_at(self, state_changed_at):
        """
        Sets the state_changed_at of this Run.


        :param state_changed_at: The state_changed_at of this Run.
        :type: int
        """

        self._state_changed_at = state_changed_at

    @property
    def created_at(self):
        """
        Gets the created_at of this Run.


        :return: The created_at of this Run.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Run.


        :param created_at: The created_at of this Run.
        :type: int
        """

        self._created_at = created_at

    @property
    def started_at(self):
        """
        Gets the started_at of this Run.


        :return: The started_at of this Run.
        :rtype: int
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """
        Sets the started_at of this Run.


        :param started_at: The started_at of this Run.
        :type: int
        """

        self._started_at = started_at

    @property
    def finished_at(self):
        """
        Gets the finished_at of this Run.


        :return: The finished_at of this Run.
        :rtype: int
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """
        Sets the finished_at of this Run.


        :param finished_at: The finished_at of this Run.
        :type: int
        """

        self._finished_at = finished_at

    @property
    def params(self):
        """
        Gets the params of this Run.


        :return: The params of this Run.
        :rtype: str
        """
        return self._params

    @params.setter
    def params(self, params):
        """
        Sets the params of this Run.


        :param params: The params of this Run.
        :type: str
        """

        self._params = params

    @property
    def jobs(self):
        """
        Gets the jobs of this Run.


        :return: The jobs of this Run.
        :rtype: list[Job]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """
        Sets the jobs of this Run.


        :param jobs: The jobs of this Run.
        :type: list[Job]
        """

        self._jobs = jobs

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
