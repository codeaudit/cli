# coding: utf-8

"""
    RiseML API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.1.0
    Contact: contact@riseml.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class TrainingFrameworkDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, distributed=None, ps_count=None, worker_count=None, tensorboard=None):
        """
        TrainingFrameworkDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'distributed': 'bool',
            'ps_count': 'int',
            'worker_count': 'int',
            'tensorboard': 'str'
        }

        self.attribute_map = {
            'distributed': 'distributed',
            'ps_count': 'ps_count',
            'worker_count': 'worker_count',
            'tensorboard': 'tensorboard'
        }

        self._distributed = distributed
        self._ps_count = ps_count
        self._worker_count = worker_count
        self._tensorboard = tensorboard


    @property
    def distributed(self):
        """
        Gets the distributed of this TrainingFrameworkDetails.


        :return: The distributed of this TrainingFrameworkDetails.
        :rtype: bool
        """
        return self._distributed

    @distributed.setter
    def distributed(self, distributed):
        """
        Sets the distributed of this TrainingFrameworkDetails.


        :param distributed: The distributed of this TrainingFrameworkDetails.
        :type: bool
        """

        self._distributed = distributed

    @property
    def ps_count(self):
        """
        Gets the ps_count of this TrainingFrameworkDetails.


        :return: The ps_count of this TrainingFrameworkDetails.
        :rtype: int
        """
        return self._ps_count

    @ps_count.setter
    def ps_count(self, ps_count):
        """
        Sets the ps_count of this TrainingFrameworkDetails.


        :param ps_count: The ps_count of this TrainingFrameworkDetails.
        :type: int
        """

        self._ps_count = ps_count

    @property
    def worker_count(self):
        """
        Gets the worker_count of this TrainingFrameworkDetails.


        :return: The worker_count of this TrainingFrameworkDetails.
        :rtype: int
        """
        return self._worker_count

    @worker_count.setter
    def worker_count(self, worker_count):
        """
        Sets the worker_count of this TrainingFrameworkDetails.


        :param worker_count: The worker_count of this TrainingFrameworkDetails.
        :type: int
        """

        self._worker_count = worker_count

    @property
    def tensorboard(self):
        """
        Gets the tensorboard of this TrainingFrameworkDetails.


        :return: The tensorboard of this TrainingFrameworkDetails.
        :rtype: str
        """
        return self._tensorboard

    @tensorboard.setter
    def tensorboard(self, tensorboard):
        """
        Sets the tensorboard of this TrainingFrameworkDetails.


        :param tensorboard: The tensorboard of this TrainingFrameworkDetails.
        :type: str
        """

        self._tensorboard = tensorboard

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
