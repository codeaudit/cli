# coding: utf-8

"""
    RiseML API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.1.0
    Contact: contact@riseml.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class GPU(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, serial=None, name=None, device=None, mem=None):
        """
        GPU - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'serial': 'str',
            'name': 'str',
            'device': 'str',
            'mem': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'serial': 'serial',
            'name': 'name',
            'device': 'device',
            'mem': 'mem'
        }

        self._id = id
        self._serial = serial
        self._name = name
        self._device = device
        self._mem = mem


    @property
    def id(self):
        """
        Gets the id of this GPU.


        :return: The id of this GPU.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GPU.


        :param id: The id of this GPU.
        :type: str
        """

        self._id = id

    @property
    def serial(self):
        """
        Gets the serial of this GPU.


        :return: The serial of this GPU.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """
        Sets the serial of this GPU.


        :param serial: The serial of this GPU.
        :type: str
        """

        self._serial = serial

    @property
    def name(self):
        """
        Gets the name of this GPU.


        :return: The name of this GPU.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this GPU.


        :param name: The name of this GPU.
        :type: str
        """

        self._name = name

    @property
    def device(self):
        """
        Gets the device of this GPU.


        :return: The device of this GPU.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """
        Sets the device of this GPU.


        :param device: The device of this GPU.
        :type: str
        """

        self._device = device

    @property
    def mem(self):
        """
        Gets the mem of this GPU.


        :return: The mem of this GPU.
        :rtype: int
        """
        return self._mem

    @mem.setter
    def mem(self, mem):
        """
        Sets the mem of this GPU.


        :param mem: The mem of this GPU.
        :type: int
        """

        self._mem = mem

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
