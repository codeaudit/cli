# coding: utf-8

"""
    RiseML API


    OpenAPI spec version: 1.0.0
    Contact: support@riseml.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class Job(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, status=None, reason=None, message=None, clean_cache=None, created_at=None):
        """
        Job - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'status': 'str',
            'reason': 'str',
            'message': 'str',
            'clean_cache': 'bool',
            'created_at': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'status': 'status',
            'reason': 'reason',
            'message': 'message',
            'clean_cache': 'clean_cache',
            'created_at': 'created_at'
        }

        self._id = id
        self._status = status
        self._reason = reason
        self._message = message
        self._clean_cache = clean_cache
        self._created_at = created_at


    @property
    def id(self):
        """
        Gets the id of this Job.


        :return: The id of this Job.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Job.


        :param id: The id of this Job.
        :type: str
        """

        self._id = id

    @property
    def status(self):
        """
        Gets the status of this Job.


        :return: The status of this Job.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Job.


        :param status: The status of this Job.
        :type: str
        """

        self._status = status

    @property
    def reason(self):
        """
        Gets the reason of this Job.


        :return: The reason of this Job.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """
        Sets the reason of this Job.


        :param reason: The reason of this Job.
        :type: str
        """

        self._reason = reason

    @property
    def message(self):
        """
        Gets the message of this Job.


        :return: The message of this Job.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this Job.


        :param message: The message of this Job.
        :type: str
        """

        self._message = message

    @property
    def clean_cache(self):
        """
        Gets the clean_cache of this Job.


        :return: The clean_cache of this Job.
        :rtype: bool
        """
        return self._clean_cache

    @clean_cache.setter
    def clean_cache(self, clean_cache):
        """
        Sets the clean_cache of this Job.


        :param clean_cache: The clean_cache of this Job.
        :type: bool
        """

        self._clean_cache = clean_cache

    @property
    def created_at(self):
        """
        Gets the created_at of this Job.


        :return: The created_at of this Job.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Job.


        :param created_at: The created_at of this Job.
        :type: int
        """

        self._created_at = created_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
